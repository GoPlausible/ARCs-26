name: Auto Update Devportal Content

on:
  push:
    branches:
      - main # Trigger on changes to the main branch
    paths:
      - "ARCs/**" # Only run when files in the ARCs directory are changed

jobs:
  updateDevportal:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ARCs repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Clone devportal repository
        run: |
          git clone --branch devrel-content https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/SudoWeezy/devportal.git devportal

      - name: Copy ARCs to devportal
        run: |
          echo "Contents of ARCs directory:"
          ls ARCs/
          echo "Contents of target directory before copy:"
          ls devportal/src/content/docs/standards/arcs/
          cp -r ARCs/* devportal/src/content/docs/standards/arcs/
          echo "Contents of target directory after copy:"
          ls devportal/src/content/docs/standards/arcs/

      - name: Modify headers and links in markdown files
        run: |
          set -e  # Stop the script if any command fails
          cd devportal/src/content/docs/standards/arcs || { echo "Directory not found"; exit 1; }

          # Loop through each markdown file
          for file in arc-*.md; do
            if [[ -f "$file" ]]; then
              # 1. Remove the first header (and any preceding blank lines)
              sed -i '/^# /{N;s/^# .*\n//}' "$file"

              # 2. Replace links like [ARC-1](./arc-0001.md) with [ARC-1](../arc-0001)
              sed -i -E 's|\(\./(arc-[0-9]+)\.md\)|(\.\./\1)|g' "$file"

              # 3. Replace links with anchors like [ARC-1](./arc-0001.md#interface-signtxnsopts)
              sed -i -E 's|\(\./(arc-[0-9]+)\.md(\#[a-zA-Z0-9-]+)?\)|(\.\./\1\2)|g' "$file"
            else
              echo "No markdown files found matching pattern 'arc-*.md'"
            fi
          done

      - name: Modify headers in markdown files
        run: |
          set -e  # Stop the script if any command fails
          cd devportal/src/content/docs/standards/arcs || { echo "Directory not found"; exit 1; }
          for file in arc-*.md; do
            if [[ -f "$file" ]]; then
              status=$(grep '^status: ' "$file" | sed 's/status: //')
              filename=$(basename -- "$file")
              arc_label="${filename%.*}"
              case $status in
                "Final")
                  variant="success"
                  ;;
                "Draft")
                  variant="caution"
                  ;;
                "Last Call")
                  variant="note"
                  ;;
                "Withdrawn")
                  variant="danger"
                  ;;
                "Deprecated")
                  variant="danger"
                  ;;
                *)
                  variant="tip"
                  ;;
              esac
              sed -i "/^status: /a sidebar:\n  label: $arc_label\n  badge:\n    text: $status\n    variant: $variant" "$file"
            else
              echo "No markdown files found matching pattern 'arc-*.md'"
            fi
          done

      - name: Update Markdown files in ARCs folder
        run: |
          cd devportal/src/content/docs/standards/arcs
          find . -name "arc-*.md" -exec sed -i 's|\.\./assets/arc-|https://raw.githubusercontent.com/algorandfoundation/ARCs/main/assets/arc-|g' {} +

      - name: Commit changes to the devrel-content branch
        run: |
          cd devportal
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add -A  # Ensure all changes are staged
          git add -f _devportal/content/*
          echo "Git status before commit:"
          git status  # Display git status for debugging
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Auto-update ARC content and headers"
            BRANCH_NAME="devportal"
            # Check if the branch exists in the remote
            if git ls-remote --exit-code origin "$BRANCH_NAME"; then
              echo "Branch $BRANCH_NAME exists."
            else
              echo "Branch $BRANCH_NAME does not exist. Creating it."
              git checkout -b "$BRANCH_NAME"
            fi
            git push origin "$BRANCH_NAME"
          else
            echo "No changes to commit."
          fi
      - name: Clean up
        run: |
          rm -rf ARCs devportal
